{"version":3,"sources":["components/Paint.jsx","components/PaintsList.jsx","components/ComplimentaryColours.jsx","components/ColourPicker.jsx","data.js","App.jsx","serviceWorker.js","index.js"],"names":["Paint","props","paint","onPaintClick","className","onClick","e","hexCode","name","src","svg","alt","PaintsList","paintData","map","key","ComplimentaryColours","chosenColour","r","g","b","findComplimentaryColour","hex","slice","parseInt","complimentaryColour","componentToHex","rgbToHex","style","color","margin","c","toString","padStart","ColourPicker","setColour","number","type","id","value","onChange","target","marginLeft","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98bc8bb6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Paint(props) {\r\n\r\n    const { paint, onPaintClick } = props;\r\n\r\n    return(\r\n        <li className=\"paint-container p1\" onClick={e => onPaintClick(paint.hexCode)}>\r\n            <div>\r\n                Name: {paint.name}\r\n            </div>\r\n            <div>\r\n                Hex: {paint.hexCode}\r\n            </div>\r\n            <img className=\"paint-pot\" src={paint.svg} alt={paint.name}/>\r\n        </li>\r\n    )\r\n}","import React from 'react';\r\nimport {Paint} from './index';\r\n\r\n\r\nexport default PaintsList;\r\n\r\n// This should handle various data filtering\r\n\r\nfunction PaintsList(props) {\r\n\r\n    const { paintData, onPaintClick } = props;\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <ul className=\"paint-list\">\r\n            {\r\n                paintData.map(paint => {\r\n                    return <Paint key={paint.hexCode} paint={paint} onPaintClick={onPaintClick}/>\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport default ComplimentaryColours;\r\n\r\nfunction ComplimentaryColours(props){\r\n\r\n    const { chosenColour } = props;\r\n\r\n    // set to the opposite of our chosen colour\r\n    let colourAsRgb = hexToRgb(chosenColour.slice(1));\r\n    const { r, g, b } = findComplimentaryColour(colourAsRgb);\r\n    let complimentaryColour = rgbToHex(r,g,b);\r\n\r\n    return <div>\r\n        {}\r\n        <span>Chosen colour: <span style={{ color: chosenColour, margin: '1rem' }}>{chosenColour}</span></span>\r\n        <span>Complimentary colour: <span style={{ color: complimentaryColour, margin: '1rem' }}>{complimentaryColour}</span></span>\r\n        <div></div>\r\n    </div>\r\n}   \r\n\r\nfunction componentToHex(c) {\r\n    var hex = c.toString(16);\r\n    return hex.padStart(2, '0');\r\n}\r\n\r\nfunction rgbToHex(r, g, b) {\r\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} rgb\r\n * @param {Number} rgb.r\r\n * @param {Number} rgb.g\r\n * @param {Number} rgb.b\r\n */\r\nfunction findComplimentaryColour({r, g, b}){\r\n    return {\r\n        r: 255 - r,\r\n        g: 255 - g,\r\n        b: 255 - b\r\n    }\r\n}\r\n\r\n\r\nfunction hexToRgb(hex) {\r\n    \r\n    return {\r\n        r: parseInt(hex.slice(0,2), 16),\r\n        g: parseInt(hex.slice(2,4), 16),\r\n        b: parseInt(hex.slice(4), 16)\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport default function ColourPicker(props) {\r\n\r\n    const { chosenColour, setColour, number } = props;\r\n\r\n    const colourChangeEvent = (e) => {\r\n        setColour(e.target.value);\r\n    }\r\n\r\n    return <div style={{margin: '3rem'}}>\r\n        <p>\r\n            Pick your own colour\r\n        </p>\r\n        <input type=\"color\" name={`Colour${number}`} id={`Colour${number}`} value={chosenColour} onChange={colourChangeEvent} />\r\n        <span style={{ color: chosenColour, marginLeft: '1rem' }}>{chosenColour}</span>\r\n    </div>\r\n} ","export default [\r\n    {\r\n        \"name\": \"Nuln Oil\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189953017_shadeNulnOil.svg\",\r\n        \"hexCode\": \"#101010\",\r\n        \"filePath\": \"./paintimages/Nuln Oil.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Agrax Earthshade\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189953018_shadeAgraxEarthshade.svg\",\r\n        \"hexCode\": \"#2D190C\",\r\n        \"filePath\": \"./paintimages/Agrax Earthshade.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Phoenician Purple\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189958110_airPhoenicianPurple.svg\",\r\n        \"hexCode\": \"#440052\",\r\n        \"filePath\": \"./paintimages/Phoenician Purple.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Kakophoni Purple\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189958121_airKakophoniPurple.svg\",\r\n        \"hexCode\": \"#8869AE\",\r\n        \"filePath\": \"./paintimages/Kakophoni Purple.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Martian Ironearth\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189956040_technicalMartianIronearth.svg\",\r\n        \"hexCode\": \"#CF705D\",\r\n        \"filePath\": \"./paintimages/Martian Ironearth.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Reikland Fleshshade Gloss\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189953035_shadeReiklandFleshshadeGloss.svg\",\r\n        \"hexCode\": \"#311908\",\r\n        \"filePath\": \"./paintimages/Reikland Fleshshade Gloss.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Kantor Blue\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189958056_airKantorBlue.svg\",\r\n        \"hexCode\": \"#02134E\",\r\n        \"filePath\": \"./paintimages/Kantor Blue.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Fyreslayer Flesh\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189960022_contrastFyreslayerFlesh.svg\",\r\n        \"hexCode\": \"#BD7866\",\r\n        \"filePath\": \"./paintimages/Fyreslayer Flesh.svg\"\r\n    },\r\n    {\r\n        \"name\": \"Phalanx Yellow\",\r\n        \"svg\": \"https://www.games-workshop.com/resources/catalog/product/600x620/99189958120_airPhalanxYellow.svg\",\r\n        \"hexCode\": \"#FFE200\",\r\n        \"filePath\": \"./paintimages/Phalanx Yellow.svg\"\r\n    }\r\n]","import React, { useState } from 'react';\r\n\r\nimport { ColourPicker, PaintsList, ComplimentaryColours } from './components';\r\nimport paintData from './data';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n    const [chosenColour, setColour] = useState('#000000');\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <header>\r\n                <h1>Painting Colour Assistant</h1>\r\n                <ColourPicker number={1} chosenColour={chosenColour} setColour={setColour} />\r\n                <ComplimentaryColours chosenColour={chosenColour} />\r\n            </header>\r\n            <hr />\r\n            <main>\r\n                <PaintsList paintData={paintData} onPaintClick={setColour} />\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}